name: OHRI CI

on:
  push:
    branches: [master, working, dev, test-prerelease]
  pull_request:
    branches: [master, working, dev, test-prerelease]
  release:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --immutable

      - name: Run tests
        run: yarn run test

      # Temporarily disable typecheck
      # - name: Run lint and typecheck
      #   run: yarn turbo run lint typescript --color --api="http://127.0.0.1:9080" --token="${{ secrets.TURBO_SERVER_TOKEN }}" --team="${{ github.repository_owner }}"

      - name: Run build
        run: yarn turbo run build --color --concurrency=5 --api="http://127.0.0.1:9080" --token="${{ secrets.TURBO_SERVER_TOKEN }}" --team="${{ github.repository_owner }}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: |
            packages/**/dist

  pre_release:
    runs-on: ubuntu-latest

    needs: build

    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/test-prerelease' }}

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            **/yarn.lock

          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --immutable

      - name: Version
        run: yarn workspaces foreach --worktree --topological --exclude @ohri/openmrs-esm-ohri version "$(node -e "console.log(require('semver').inc(require('./package.json').version, 'patch'))")-pre.${{ github.run_number }}"

      - name: Build
        run: yarn turbo run build --color --concurrency=5

      - name: setup git config
        run: |
           git config user.name "GitHub Actions Bot"
           git config user.email "<>"
      - name: commit
        run: |
           git add .
           git commit -m "Prerelease version" --no-verify

      - name: Pre-release
        run: yarn config set npmAuthToken "${NODE_AUTH_TOKEN}" && yarn run ci:prepublish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: |
            packages/**/dist

  release:
    runs-on: ubuntu-latest

    needs: build

    if: ${{ github.event_name == 'release' }}

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --immutable

      - run: yarn turbo run build --color
      - run: yarn config set npmAuthToken "${NODE_AUTH_TOKEN}" && yarn run ci:publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

  docker_devserver_frontend:
    runs-on: ubuntu-latest
    needs: pre_release

    steps:
      - name: Wait for 5 min - Let @esms reflect on NPM registry
        run: sleep 300
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ohri-dev-frontend:next,${{ secrets.DOCKERHUB_USERNAME }}/ohri-dev-frontend:ci_${{ github.run_number }}
          cache-from: type=inline,ref=user/app:buildcache
          cache-to: type=inline,ref=user/app:buildcache,mode=max

  dev_server_status:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    needs: docker_devserver_frontend

    steps:
      - name: Wait for 2 min - Let Images reflect on Docker Hub
        run: sleep 300
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy files to /home/runner/
        run: |
          ls -la -t
          cp -r $GITHUB_WORKSPACE/.github/.ssh/ /home/runner/

      - name: List contents of /home/runner/
        run: ls -la /home/runner/.ssh/

      - name: webfactory/ssh-agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.LL_SSH_PRIVATE_KEY }}

      - name: Check SSH to remote OHRI Dev status
        run: |
            ssh-keygen -R 172.19.0.16

  dev_deploy:
    runs-on: ubuntu-latest
    needs: docker_devserver_frontend

    if: (github.event_name == 'push' ||  github.event.pull_request.merged)

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: webfactory/ssh-agent
        uses: webfactory/ssh-agent@v0.8.0

        with:
          ssh-private-key: ${{ secrets.OHRI_SSH_PRIVATE_KEY }}

      - name: SSH to remote OHRI Dev server via jump host
        run: |
          ssh -p 2216 \
              -o "UserKnownHostsFile=/dev/null" \
              -o "StrictHostKeyChecking=no" \
              -o "ProxyCommand=ssh -o StrictHostKeyChecking=no -W %h:%p ohri@20.172.182.46 -p 2202" \
              ohri@172.19.0.16 "\
              cd /opt && \
              docker compose -f docker-compose-ohri-dev.yml pull && \
              docker compose -f docker-compose-ohri-dev.yml stop && \
              docker compose -f docker-compose-ohri-dev.yml up -d"
