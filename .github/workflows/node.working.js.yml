name: OHRI CI - @esm and Docker Image

on:
  push:
    branches:
      - working

  pull_request:
    branches:
      - working
    types: [opened, synchronize]
  release:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --immutable

      - name: Run tests
        run: yarn run test

      # Temporarily disable typecheck
      # - name: Run lint and typecheck
      #   run: yarn turbo run lint typescript --color --api="http://127.0.0.1:9080" --token="${{ secrets.TURBO_SERVER_TOKEN }}" --team="${{ github.repository_owner }}"

      - name: Run build
        run: yarn turbo run build --color --concurrency=5 --api="http://127.0.0.1:9080" --token="${{ secrets.TURBO_SERVER_TOKEN }}" --team="${{ github.repository_owner }}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: |
            packages/**/dist

  pre_release:
    runs-on: ubuntu-latest

    needs: build

    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/working' }}

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          registry-url: 'https://registry.npmjs.org'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --immutable

      - run: yarn lerna version "$(node -e "console.log(require('./lerna.json').version)")-pre.${{ github.run_number }}" --no-git-tag-version --yes

      # Disable the step to updated configs of migration
      # - name: Test and Generate Badges
      #   run: yarn badges

      - name: setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
      - name: commit
        run: |
          git add .
          git commit -m "Prerelease version" --no-verify
      - run: yarn run ci:prepublish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

  release:
    runs-on: ubuntu-latest

    needs: pre_release

    if: ${{ github.event_name == 'release' }}

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          registry-url: 'https://registry.npmjs.org'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --immutable

      - name: Publish to NPM
        run: yarn run ci:publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

  docker_workingserver_frontend:
    runs-on: ubuntu-latest
    needs: pre_release

    steps:
      - name: Wait for 5 min - Let @esms reflect on NPM registry
        run: sleep 300
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ohri-working-frontend:next,${{ secrets.DOCKERHUB_USERNAME }}/ohri-working-frontend:ci_${{ github.run_number }}
          cache-from: type=inline,ref=user/app:buildcache
          cache-to: type=inline,ref=user/app:buildcache,mode=max

  working_deploy:
    runs-on: ubuntu-latest
    needs: docker_workingserver_frontend

    if: (github.event_name == 'push' ||  github.event.pull_request.merged)

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: webfactory/ssh-agent
        uses: webfactory/ssh-agent@v0.8.0

        with:
          ssh-private-key: ${{ secrets.OHRI_SSH_PRIVATE_KEY }}

      - name: SSH to remote OHRI working server via jump host
        run: |
          ssh -p 2217 \
              -o "UserKnownHostsFile=/dev/null" \
              -o "StrictHostKeyChecking=no" \
              -o "ProxyCommand=ssh -o StrictHostKeyChecking=no -W %h:%p ohri@20.172.182.46 -p 2202" \
              ohri@172.19.0.17 "\
              cd /opt && \
              docker compose -f docker-compose-ohri-working.yml pull && \
              docker compose -f docker-compose-ohri-working.yml stop && \
              docker compose -f docker-compose-ohri-working.yml up -d"
